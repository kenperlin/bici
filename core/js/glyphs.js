let glyphs = mc => {
mc.addGlyph('A',[[-.66,-1],[0,1],[.66,-1]],[[-.45,-.33],[.45,-.33]]);
mc.addGlyph('B',[[-.55,1],[-.55,-1]],[[-.55,1],[0,1],.8,[0,.1],[-.55,.1],[0,.1],1.1,[0,-1],[-.55,-1]]);
mc.addGlyph('C',[[.55,.35],[.55,.351],1,[-.55,.351],[-.55,-.351],1,[.55,-.351],[.55,-.35]]);
mc.addGlyph('D',[[-.66,1],[-.66,-1]],[[-.66,1],[-.33,1],2,[-.33,-1],[-.66,-1]]);
mc.addGlyph('E',[[.66,1],[-.66,1],[-.66,-1],[.66,-1]],[[-.66,0],[.33,0]]);
mc.addGlyph('F',[[.66,1],[-.66,1],[-.66,-1]],[[-.66,0],[.33,0]]);
mc.addGlyph('G',[[.6,.35],[.6,.351],1,[-.6,.351],[-.6,-.351],1,[.6,-.351],[.6,-.35],[.6,-.2],[0,-.2]]);
mc.addGlyph('H',[[-.6,1],[-.6,-1]],[[-.6,0],[.6,0]],[[.6,1],[.6,-1]]);
mc.addGlyph('I',[[0,1],[0,-1]]);
mc.addGlyph('J',[[.5,1],[.5,0],1,[-.5,0],[-.5,.01]]);
mc.addGlyph('K',[[-.6,1],[-.6,-1]],[[.5,1],[-.5,.1],[.6,-1]]);
mc.addGlyph('L',[[-.6,1],[-.6,-1],[.6,-1]]);
mc.addGlyph('M',[[-.6,-1],[-.6,1],[0,0],[.6,1],[.6,-1]]);
mc.addGlyph('N',[[-.6,-1],[-.6,1],[.6,-1],[.6,1]]);
mc.addGlyph('O',[[-.01,1],[.01,1],1.2,[.01,-1],[-.01,-1],1.2,[-.01,1],[.01,1]]);
mc.addGlyph('P',[[-1/2,1],[-1/2,-1]],[[-1/2,1],[0,1],1,[0,0],[-1/2,0]]);
mc.addGlyph('Q',[[-.01,1],[.01,1],1.2,[.01,-1],[-.01,-1],1.2,[-.01,1],[.01,1]],[[.1,-.5],[.7,-1]]);
mc.addGlyph('R',[[-.5,1],[-.5,-1]],[[-.5,1],[0,1],1,[0,0],[-.4,0],[.5,-1]]);
mc.addGlyph('S',[[.5,.55],[.5,.56],1,[-.5,.56],[-.5,.55],1,[.6,-.5],[.6,-.51],1,[-.6,-.56],[-.6,-.55]]);
mc.addGlyph('T',[[-.6,1],[.6,1]],[[0,1],[0,-1]]);
mc.addGlyph('U',[[-.6,1],[-.6,-.5],1,[.6,-.5],[.6,1]]);
mc.addGlyph('V',[[-.6,1],[0,-1],[.6,1]]);
mc.addGlyph('W',[[-.7,1],[-.4,-1],[0,.2],[.4,-1],[.7,1]]);
mc.addGlyph('X',[[-.6,1],[.6,-1]],[[.6,1],[-.6,-1]]);
mc.addGlyph('Y',[[-.6,1],[0,.1]],[[.6,1],[0,.1],[0,-1]]);
mc.addGlyph('Z',[[-.6,1],[.6,1],[-.6,-1],[.6,-1]]);

//mc.addGlyph('square',[[-1,1],[1,1],[1,-1],[-1,-1],[-1,1]]);
mc.addGlyph('circle',[[-.01,1],[.01,1],2,[.01,-1],[-.01,-1],2,[-.01,1],[.01,1]]);
//mc.addGlyph('plus',[[0,1],[0,-1]],[[-1,0],[1,0]]);
//mc.addGlyph('minus',[[-1,0],[1,0]]);
mc.addGlyph('times',[[-1,1],[1,-1]],[[1,1],[-1,-1]]);
mc.addGlyph('slash',[[.7,1],[-.7,-1]]);
mc.addGlyph('mug',[[-.5,.9],[-.5,-.9],[-.48,-.91],.5,[.98,-.91],[1,-.9],[1,.9]],
                  [[1,.9],[.98,.91],.5,[-.48,.91],[-.5,.9],[-.48,.89],.5,[.98,.89],[1,.9]],
		  [[-.5,.4],[-.51,.4],1,[-.51,-.6],[-.5,-.6]]);
mc.addGlyph('bottle',[[-.1,1],[-.1,.7],1,[-.4,-.2],[-.4,-1],.5,[.4,-1],[.4,-.2],1,[.1,.7],[.1,1]],
                     [[.1,.99],[.1,1.01],.1,[-.1,1.01],[-.1,.99],.1,[.1,.99],[.1,1.01]]);
mc.addGlyph('umbrella',[[-1,.89],[-.99,.9],.75,[.99,.9],[1,.89],[-1,.9]],
                       [[0,.9],[0,-.9],[0,-.91],.5,[-.4,-.91],[-.4,-.9]]);
mc.addGlyph('specs',[[-1.21,1],[-1.19,1],2,[-1.19,-1],[-1.21,-1],2,[-1.21,1],[-1.19,1]],
                    [[ 1.19,1],[ 1.21,1],2,[ 1.21,-1],[ 1.19,-1],2,[ 1.19,1],[ 1.21,1]],
		    [[ -.51,.75],[-.5,.76],.5,[.5,.76],[.51,.75]]);
mc.addGlyph('lightbulb',[[-.2,-.8],[-.2,-.5],.7,[-.5,.5],[-.5,.51],.4,[-.01,1],[.01,1],.4,[.5,.51],[.5,.5],.7,[.2,-.5],[.2,-.8]],
                        [[.13,-.8],[.13,-.81],.3,[-.13,-.81],[-.13,-.8]],[[-.16,-.5],[.16,-.5]]);
mc.addGlyph('camera',[[-1,.7],[1,.7],[1,-.7],[-1,-.7],[-1,.7]],
                     [[-.01,.4],[.01,.4],.8,[.01,-.4],[-.01,-.4],.8,[-.01,.4],[.01,.4]],
		     [[-.5,.7],[-.3,.95],[.3,.95],[.5,.7]]);
mc.addGlyph('heart',[[0,.4],[-.01,.41],.5,[-.8,.21],[-.801,.2],.7,[-.01,-.99],[0,-1]],
                    [[0,.4],[ .01,.41],.5,[ .8,.21],[ .801,.2],.7,[ .01,-.99],[0,-1]]);
mc.addGlyph('diamond',[[0,1],[.7,0],[0,-1],[-.7,0],[0,1]]);
mc.addGlyph('clock',[[-.01,1],[.01,1],2,[.01,-1],[-.01,-1],2,[-.01,1],[.01,1]],[[0,.8],[0,0],[.6,0]]);
mc.addGlyph('smile',[[-.01,1],[.01,1],2,[.01,-1],[-.01,-1],2,[-.01,1],[.01,1]],
                    [[-.5,.4],[-.49,.405],.1,[-.21,.405],[-.2,.4]],
		    [[.2,.4],[.21,.405],.1,[.5,.405],[.51,.4]],
		    [[-.5,-.4],[-.49,-.41],.35,[.49,-.41],[.5,-.4]]);
mc.addGlyph('1',[[-.3,.7],[0,1],[0,-1]]);
mc.addGlyph('2',[[-.6,.7],[-.6,.71],1,[.6,.71],[.6,.7],1,[-.7,-.99],[-.7,-1],[.7,-1]]);
mc.addGlyph('3',[[-.5,.7],[-.5,.71],1,[.501,.71],[.5,.7],.3,[.01,.2],[.0,.2],[.01,.2],.6,[.701,-.5],[.7,-.51],1,[-.6,-.51],[-.6,-.5]]);
mc.addGlyph('4',[[0,1],[-1,-.4],[.6,-.4]],[[0,1],[0,-1]]);
mc.addGlyph('5',[[.5,1],[-.5,1],[-.5,0],[-.49,.01],1,[.6,-.5],[.6,-.51],1,[-.6,-.82],[-.61,-.8]]);
mc.addGlyph('6',[[.407,.7],[.4,.71],.8,[-.5,.31],[-.5,.3],[-.5,-.5],[-.498,-.51],1,[.5,-.31],[.5,-.3],1,[-.5,-.3],[-.5,-.31]]);
mc.addGlyph('7',[[-.7,1],[.7,1],[-.2,-1]]);
mc.addGlyph('8',[[0,1],[-.01,1],.25,[-.4,.71],[-.402,.7],.5,[-.01,.1],[.01,.1],.6,[.5,-.6],[.5,-.61],1,[-.5,-.61],[-.5,-.6],.6,[0,.1],[.01,.1],.5,[.402,.7],[.4,.71],.25,[.01,1],[0,1]]);
mc.addGlyph('9',[[.5,.31],[.5,.3],1,[-.5,.3],[-.5,.31],1,[.498,.51],[.5,.5],[.5,-.3],[.5,-.31],.8,[-.45,-.81],[-.46,-.8]]);
/*
mc.addGlyph('a',[[-1,.7],[-1,.701],1,[1,.701],[1,.7],[1,-1]],
                [[1,-.051],[1,-.05],1,[-1,-.05],[-1,-.55],1,[1,-.551],[1,-.55]]);
mc.addGlyph('b',[[-.55,1],[-.55,-1]],[[-.55,0],[-.54,.005],2.5,[-.54,-.905],[-.55,-.9]]);
mc.addGlyph('c',[[1,.5],[1,.51],1,[-1,.51],[-1,-.51],1,[1,-.51],[1,-.5]]);
mc.addGlyph('d',[[.55,1],[.55,-1]],[[.55,0],[.54,.005],2.5,[.54,-.905],[.55,-.9]]);
mc.addGlyph('e',[[-1,0],[1,0],[1,.01],1.8,[-1,.01],[-1,-.51],1.2,[1,-.51],[1,-.5]]);
mc.addGlyph('f',[[.5,.5],[.5,.51],1,[-.3,.51],[-.3,-1]],[[-.6,0],[.2,0]]);
mc.addGlyph('g',[[.31,.9],[.3,.905],3,[.3,.3],[.31,.305]],
                [[.3,1],[.3,-.31],1,[-1,-.31],[-1,-.3]]);
mc.addGlyph('h',[[-.5,1],[-.5,-1],[-.5,-.4],1,[.5,-.4],[.5,-1]]);
mc.addGlyph('i',[[0,.4],[0,-1]],[[0,1],[0,.9]]);
mc.addGlyph('j',[[0,.4],[0,-.31],1,[-.7,-.31],[-.7,-.3]],[[0,1],[0,.9]]);
mc.addGlyph('k',[[-.5,1],[-.5,-1]],[[.5,.1],[-.5,-.2],[.5,-1]]);
mc.addGlyph('l',[[-.2,1],[-.19,1],.2,[0,.81],[0,.8],[0,-.8],[0,-.81],.2,[.19,-1],[.2,-1]]);
mc.addGlyph('m',[[-1,.2],[-1,-1],[-1,-.3],1,[0,-.3],[0,-1],[0,-.3],1,[1,-.3],[1,-1]]);
mc.addGlyph('n',[[-1,.2],[-1,-1],[-1,-.3],1,[0,-.3],[0,-1]]);
mc.addGlyph('o',[[-.01,1],[.01,1],1.5,[.01,-1],[-.01,-1],1.5,[-.01,1],[.01,1]]);
mc.addGlyph('p',[[-.55,1],[-.55,-1]],[[-.55,.9],[-.54,.905],2.5,[-.54,-.005],[-.55,0]]);
mc.addGlyph('q',[[.55,.9],[.54,.905],2.5,[.54,-.005],[.55,0]],[[.55,1],[.55,-1],[.95,-.6]]);
mc.addGlyph('r',[[0,.2],[0,-1]],[[0,0],[.01,.01],.5,[.79,.01],[.8,0]]);
mc.addGlyph('s',[[.6,.35],[.6,.36],1,[-.6,.36],[-.6,.35],1,[.6,-.3],[.6,-.31],1,[-.6,-.36],[-.6,-.35]]);
mc.addGlyph('t',[[0,.8],[0,-.7],[0,-.71],.5,[.49,-1],[.5,-1]],[[-.5,.3],[.5,.3]]);
mc.addGlyph('u',[[0,1],[0,.3],1,[1,.3],[1,1],[1,-.2]]);
mc.addGlyph('v',[[-1,1],[0,-1],[1,1]]);
mc.addGlyph('w',[[-1,.6],[-.5,-1],[0,-.2],[.5,-1],[1,.6]]);
mc.addGlyph('x',[[-.8,1],[.8,-1]],[[.8,1],[-.8,-1]]);
mc.addGlyph('y',[[-.65,1],[-.05,-.1]],[[.5,1],[0,0],.3,[-.5,-.7],[-.7,-.7]]);
mc.addGlyph('z',[[-1,1],[1,1],[-1,-1],[1,-1]]);
*/
mc.addGlyph('test1',function() {
   this.update = time => [
      [ [ -1,Math.sin(4*time)], [0, 1], [ 1,Math.sin(4*time)] ],
      [ [  1,Math.sin(4*time)], [0,-1], [-1,Math.sin(4*time)] ]
   ];
});
mc.addGlyph('flapping',function() {
   this.update = time => {
      let t = .1 * Math.sin(8 * time + .2);
      let c = Math.cos(t);
      let s = Math.sin(t);
      let x = c * (1 + 2 * s);
      let y = .3 * s;
      return [ [ [-x,y+4*s-.2], [-c/2,y+s], [0,y-s], [c/2,y+s], [x,y+4*s-.2] ] ];
   };
});
mc.addGlyph('sliderX',function() {
   let t = .5;
   this.drag = (x,y) => t = (x+1)/2;
   this.update = time => {
      return [ [ [-1,0],[1,0] ], [ [2*t-1,.2],[2*t-1,-.2] ] ];
   };
   this.value = () => t;
});
mc.addGlyph('sliderY',function() {
   let t = .5;
   this.drag = (x,y) => t = (y+1)/2;
   this.update = time => {
      return [ [ [0,1],[0,-1] ], [ [-.2,2*t-1],[.2,2*t-1] ] ];
   };
   this.value = () => t;
});

// To do: Implement mc.glyph3D()

mc.glyph3D = function(obj,update) {
   let M = new M4(), theta = 0, phi = 0, cx, cy;
   obj.move = (x,y) => { cx = cy = undefined; }
   obj.drag = (x,y) => {
      if (cx !== undefined) {
         theta += cx - x;
         phi   -= cy - y;
      }
      cx = x;
      cy = y;
   }
   obj.update = time => {
      if (time == 0)
         return update(0);
      M.identity();
      let t = Math.min(1,2*time);
      M.perspective(0,0,10*Math.max(1,1/(t*t*(3-t-t))));
      M.rotateX(phi);
      M.rotateY(theta);
      let A = update(time), B = [];
      for (let i = 0 ; i < A.length ; i++) {
         B[i] = [];
	 for (let j = 0 ; j < A[i].length ; j++)
	    B[i][j] = M.transform(A[i][j]);
      }
      return B;
   }
}

mc.addGlyph('cube',function() {
   new mc.glyph3D(this, time => {
      if (time == 0)
         return [ [ [-1,1],[1,1],[1,-1],[-1,-1],[-1,1] ] ];
      let p = cubeVertices;
      return [
         [p[0],p[1]], [p[2],p[3]], [p[4],p[5]], [p[6],p[7]],
         [p[0],p[2]], [p[1],p[3]], [p[4],p[6]], [p[5],p[7]],
         [p[0],p[4]], [p[1],p[5]], [p[2],p[6]], [p[3],p[7]],
       ];
   });
});

}
